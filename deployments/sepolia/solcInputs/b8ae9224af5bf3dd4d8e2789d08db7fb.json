{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./PriceCoverter.sol\";\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n    uint256 public constant MINM_USD = 50 * 1e18; // for gas optimization as they don't get stored like storage data types\n    // blockchain nodes cannot make HTTP calls so we need a decentralized network\n    address[] public funders;\n    // to check how much money does user send (below code)\n    mapping(address => uint256) public addressToAmmountFunded;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // require-revert\n        // require is like if-else\n        // though I haven't send any params still it will run as it will expect msg.value as it's 1st param\n        require(\n            (msg.value.getConversionRate(priceFeed)) >= MINM_USD,\n            \"Didn't send enogh !!!\"\n        );\n        addressToAmmountFunded[msg.sender] += msg.value;\n        funders.push(msg.sender); // msg.sender means whatever address is sending the money.\n        // emit Funded(msg.sender, msg.value);\n    }\n\n    address public immutable i_owner; // for gas optimization as they don't get stored like storage data types\n    AggregatorV3Interface public priceFeed;\n\n    function withdraw() public {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmmountFunded[funder] = 0;\n        }\n        // resetting the array\n        funders = new address[](0);\n        // Sending ETH from a Contract\n        // transfer\n        // msg.sender = address\n        // payable(msg.sender) = payable address\n        // to send ETH we need payable address.\n        // payable(msg.sender).transfer(address(this).balance); this throws error\n        // send\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        require((sendSuccess), \"Failed\");\n        // call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Calling Failed\");\n        revert();\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner,\"sender isnot owner\");\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        _; // doing the rest of the code...\n    }\n\n    // if someone wants to send ETH without the proper func call..in this case fund() then\n    // receive() -> no need to write func ib bn front as solidity knows that it's a special func\n    // fallback()\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n// Libraries are similar to contracts..cann't send ethers...\n"
    },
    "contracts/PriceCoverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n// npm i @chainlink/contracts\r\n\r\nlibrary PriceConverter {\r\n    // all the functions are internal...cannot declare any state variable or cannot send any ether...\r\n\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        // Sepolia ETH / USD Address\r\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        // ETH/USD rate in 18 digit\r\n        return uint256(answer * 1e10);\r\n        // or (Both will do the same thing)\r\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\r\n    }\r\n\r\n    // 1000000000\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        // or (Both will do the same thing)\r\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\r\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}